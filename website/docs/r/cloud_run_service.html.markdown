---
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in
#     .github/CONTRIBUTING.md.
#
# ----------------------------------------------------------------------------
layout: "google"
page_title: "Google: google_cloud_run_service"
sidebar_current: "docs-google-cloud-run-service"
description: |-
  **Note:** Cloud Run as a product is in beta, however the REST API is currently still an alpha.
---

# google\_cloud\_run\_service

**Note:** Cloud Run as a product is in beta, however the REST API is currently still an alpha.
Please use this with caution as it may change when the API moves to beta.

Service acts as a top-level container that manages a set of Routes and
Configurations which implement a network service. Service exists to provide a
singular abstraction which can be access controlled, reasoned about, and
which encapsulates software lifecycle decisions such as rollout policy and
team resource ownership. Service acts only as an orchestrator of the
underlying Routes and Configurations (much as a kubernetes Deployment
orchestrates ReplicaSets).

The Service's controller will track the statuses of its owned Configuration
and Route, reflecting their statuses and conditions as its own.

See also:
https://github.com/knative/serving/blob/master/docs/spec/overview.md#service

To get more information about Service, see:

* [API documentation](https://cloud.google.com/run/docs/reference/rest/v1alpha1/projects.locations.services)
* How-to Guides
    * [Official Documentation](https://cloud.google.com/run/docs/)

<div class = "oics-button" style="float: right; margin: 0 0 -15px">
  <a href="https://console.cloud.google.com/cloudshell/open?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2Fterraform-google-modules%2Fdocs-examples.git&cloudshell_working_dir=cloud_run_service_basic&cloudshell_image=gcr.io%2Fgraphite-cloud-shell-images%2Fterraform%3Alatest&open_in_editor=main.tf&cloudshell_print=.%2Fmotd&cloudshell_tutorial=.%2Ftutorial.md" target="_blank">
    <img alt="Open in Cloud Shell" src="//gstatic.com/cloudssh/images/open-btn.svg" style="max-height: 44px; margin: 32px auto; max-width: 100%;">
  </a>
</div>
## Example Usage - Cloud Run Service Basic


```hcl
resource "google_cloud_run_service" "default" {
  name     = "tftest-cloudrun"
  location = "us-central1"
  provider = "google-beta"

  metadata {
    namespace = "my-project-name"
  }

  spec {
    containers {
      image = "gcr.io/cloudrun/hello"
    }
  }
}

# The Service is ready to be used when the "Ready" condition is True
# Due to provider and API limitations this is best accessed through a local variable
locals {
  cloud_run_status = {
    for cond in google_cloud_run_service.default.status[0].conditions :
    cond.type => cond.status
  }
}

output "isReady" {
  value = local.cloud_run_status["Ready"] == "True"
}
```

## Argument Reference

The following arguments are supported:


* `name` -
  (Required)
  Name must be unique within a namespace, within a Cloud Run region.
  Is required when creating resources. Name is primarily intended
  for creation idempotence and configuration definition. Cannot be updated.
  More info: http://kubernetes.io/docs/user-guide/identifiers#names

* `spec` -
  (Required)
  RevisionSpec holds the desired state of the Revision (from the client).  Structure is documented below.

* `metadata` -
  (Required)
  Metadata associated with this Service, including name, namespace, labels,
  and annotations.  Structure is documented below.

* `location` -
  (Required)
  The location of the cloud run instance. eg us-central1




The `spec` block supports:

* `containers` -
  (Required)
  Container defines the unit of execution for this Revision.
  In the context of a Revision, we disallow a number of the fields of
  this Container, including: name, ports, and volumeMounts.
  The runtime contract is documented here:
  https://github.com/knative/serving/blob/master/docs/runtime-contract.md  Structure is documented below.

* `container_concurrency` -
  (Optional)
  ContainerConcurrency specifies the maximum allowed in-flight (concurrent)
  requests per container of the Revision. Values are:
  - `0` thread-safe, the system should manage the max concurrency. This is
      the default value.
  - `1` not-thread-safe. Single concurrency
  - `2-N` thread-safe, max concurrency of N

* `serving_state` -
  ServingState holds a value describing the state the resources
  are in for this Revision.
  It is expected
  that the system will manipulate this based on routability and load.


The `containers` block supports:

* `working_dir` -
  (Optional)
  Container's working directory.
  If not specified, the container runtime's default will be used, which
  might be configured in the container image.

* `args` -
  (Optional)
  Arguments to the entrypoint.
  The docker image's CMD is used if this is not provided.
  Variable references $(VAR_NAME) are expanded using the container's
  environment. If a variable cannot be resolved, the reference in the input
  string will be unchanged. The $(VAR_NAME) syntax can be escaped with a
  double $$, ie: $$(VAR_NAME). Escaped references will never be expanded,
  regardless of whether the variable exists or not.
  More info:
  https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell

* `env_from` -
  (Optional)
  List of sources to populate environment variables in the container.
  All invalid keys will be reported as an event when the container is starting.
  When a key exists in multiple sources, the value associated with the last source will
  take precedence. Values defined by an Env with a duplicate key will take
  precedence.  Structure is documented below.

* `image` -
  (Required)
  Docker image name. This is most often a reference to a container located
  in the container registry, such as gcr.io/cloudrun/hello
  More info: https://kubernetes.io/docs/concepts/containers/images

* `command` -
  (Optional)
  Entrypoint array. Not executed within a shell.
  The docker image's ENTRYPOINT is used if this is not provided.
  Variable references $(VAR_NAME) are expanded using the container's
  environment. If a variable cannot be resolved, the reference in the input
  string will be unchanged. The $(VAR_NAME) syntax can be escaped with a
  double $$, ie: $$(VAR_NAME). Escaped references will never be expanded,
  regardless of whether the variable exists or not.
  More info:
  https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell

* `env` -
  (Optional)
  List of environment variables to set in the container.  Structure is documented below.

* `resources` -
  (Optional)
  Compute Resources required by this container. Used to set values such as max memory
  More info:
  https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources  Structure is documented below.


The `env_from` block supports:

* `prefix` -
  (Optional)
  An optional identifier to prepend to each key in the ConfigMap.

* `config_map_ref` -
  (Optional)
  The ConfigMap to select from  Structure is documented below.

* `secret_ref` -
  (Optional)
  The Secret to select from  Structure is documented below.


The `config_map_ref` block supports:

* `optional` -
  (Optional)
  Specify whether the ConfigMap must be defined

* `local_object_reference` -
  (Optional)
  The ConfigMap to select from.  Structure is documented below.


The `local_object_reference` block supports:

* `name` -
  (Optional)
  Name of the referent.
  More info:
  https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names

The `secret_ref` block supports:

* `local_object_reference` -
  (Optional)
  The Secret to select from.  Structure is documented below.

* `optional` -
  (Optional)
  Specify whether the Secret must be defined


The `local_object_reference` block supports:

* `name` -
  (Optional)
  Name of the referent.
  More info:
  https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names

The `env` block supports:

* `name` -
  (Optional)
  Name of the environment variable.

* `value` -
  (Optional)
  Variable references $(VAR_NAME) are expanded
  using the previous defined environment variables in the container and
  any route environment variables. If a variable cannot be resolved,
  the reference in the input string will be unchanged. The $(VAR_NAME)
  syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped
  references will never be expanded, regardless of whether the variable
  exists or not.
  Defaults to "".

The `resources` block supports:

* `limits` -
  (Optional)
  Limits describes the maximum amount of compute resources allowed.
  The values of the map is string form of the 'quantity' k8s type:
  https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go

* `requests` -
  (Optional)
  Requests describes the minimum amount of compute resources required.
  If Requests is omitted for a container, it defaults to Limits if that is
  explicitly specified, otherwise to an implementation-defined value.
  The values of the map is string form of the 'quantity' k8s type:
  https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go

The `metadata` block supports:

* `labels` -
  (Optional)
  Map of string keys and values that can be used to organize and categorize
  (scope and select) objects. May match selectors of replication controllers
  and routes.
  More info: http://kubernetes.io/docs/user-guide/labels

* `generation` -
  A sequence number representing a specific generation of the desired state.

* `resource_version` -
  An opaque value that represents the internal version of this object that
  can be used by clients to determine when objects have changed. May be used
  for optimistic concurrency, change detection, and the watch operation on a
  resource or set of resources. They may only be valid for a
  particular resource or set of resources.
  More info:
  https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency

* `self_link` -
  SelfLink is a URL representing this object.

* `uid` -
  UID is a unique id generated by the server on successful creation of a resource and is not
  allowed to change on PUT operations.
  More info: http://kubernetes.io/docs/user-guide/identifiers#uids

* `namespace` -
  (Required)
  In Cloud Run the namespace must be equal to either the
  project ID or project number.

* `annotations` -
  (Optional)
  Annotations is a key value map stored with a resource that
  may be set by external tools to store and retrieve arbitrary metadata. More
  info: http://kubernetes.io/docs/user-guide/annotations

- - -


* `project` - (Optional) The ID of the project in which the resource belongs.
    If it is not provided, the provider project is used.


## Attributes Reference

In addition to the arguments listed above, the following computed attributes are exported:


* `status` -
  The current status of the Service.  Structure is documented below.


The `status` block contains:

* `conditions` -
  Array of observed Service Conditions, indicating the current ready state of the service.  Structure is documented below.


The `conditions` block contains:

* `message` -
  Human readable message indicating details about the current status.

* `status` -
  Status of the condition, one of True, False, Unknown.

* `reason` -
  One-word CamelCase reason for the condition's current status.

* `type` -
  Type of domain mapping condition.

## Timeouts

This resource provides the following
[Timeouts](/docs/configuration/resources.html#timeouts) configuration options:

- `create` - Default is 4 minutes.
- `update` - Default is 4 minutes.
- `delete` - Default is 4 minutes.

## Import

Service can be imported using any of these accepted formats:

```
$ terraform import -provider=google-beta google_cloud_run_service.default projects/{{project}}/locations/{{location}}/services/{{name}}
$ terraform import -provider=google-beta google_cloud_run_service.default {{project}}/{{location}}/{{name}}
$ terraform import -provider=google-beta google_cloud_run_service.default {{location}}/{{name}}
```

-> If you're importing a resource with beta features, make sure to include `-provider=google-beta`
as an argument so that this provider uses the correct provider to import your resource.

## User Project Overrides

This resource supports [User Project Overrides](https://www.terraform.io/docs/providers/google/provider_reference.html#user_project_override).
