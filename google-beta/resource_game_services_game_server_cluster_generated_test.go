// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package google

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/helper/acctest"
	"github.com/hashicorp/terraform-plugin-sdk/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/terraform"
)

func TestAccGameServicesGameServerCluster_gameServiceClusterBasicExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"agones_cluster": "bootstrapped-agones-cluster",
		"random_suffix":  acctest.RandString(10),
	}

	resource.Test(t, resource.TestCase{
		PreCheck:     func() { testAccPreCheck(t) },
		Providers:    testAccProvidersOiCS,
		CheckDestroy: testAccCheckGameServicesGameServerClusterDestroy,
		Steps: []resource.TestStep{
			{
				Config: testAccGameServicesGameServerCluster_gameServiceClusterBasicExample(context),
			},
		},
	})
}

func testAccGameServicesGameServerCluster_gameServiceClusterBasicExample(context map[string]interface{}) string {
	return Nprintf(`
resource "google_game_services_game_server_cluster" "default" {
  provider   = google-beta
    
  cluster_id = "%{agones_cluster}"
  realm_id   = google_game_services_realm.default.realm_id

  connection_info {
    gke_cluster_reference {
      cluster = "locations/us-west1/clusters/%{agones_cluster}"
    }
    namespace = "default"
  }
}

resource "google_game_services_realm" "default" {
  provider = google-beta

  realm_id   = "realm%{random_suffix}"
  time_zone  = "PST8PDT"

  description = "Test Game Realm"
}
`, context)
}

func testAccCheckGameServicesGameServerClusterDestroy(s *terraform.State) error {
	for name, rs := range s.RootModule().Resources {
		if rs.Type != "google_game_services_game_server_cluster" {
			continue
		}
		if strings.HasPrefix(name, "data.") {
			continue
		}

		config := testAccProvider.Meta().(*Config)

		url, err := replaceVarsForTest(config, rs, "{{GameServicesBasePath}}projects/{{project}}/locations/{{location}}/realms/{{realm_id}}/gameServerClusters/{{cluster_id}}")
		if err != nil {
			return err
		}

		_, err = sendRequest(config, "GET", "", url, nil)
		if err == nil {
			return fmt.Errorf("GameServicesGameServerCluster still exists at %s", url)
		}
	}

	return nil
}
